/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package guid.mda;

import org.junit.Test;
import static org.junit.Assert.*;

import java.math.BigInteger;


public class FirstTest {
    private static BigInteger FIFTEEN = BigInteger.valueOf(15);

    protected String toHexString(BigInteger b) {
      // recursively.  Also, multiple exit points (two!)
      String[] vals = {"0", "1", "2", "3",
                              "4", "5", "6", "7",
                              "8", "9", "A", "B",
                              "C", "D", "E", "F"};
      if (b.compareTo(FIFTEEN) > 0) {
        return toHexString(b.shiftRight(4)) + vals[b.and(FIFTEEN).intValue()];
      } else {
        return "0x" + vals[b.and(FIFTEEN).intValue()];
      }
    }

    protected String toBinaryString(BigInteger b) {
      StringBuilder retval = new StringBuilder("");
      // System.err.format("\t bits: count = %d, length = %d\n", b.bitCount(), b.bitLength());
      // bit count is the actual number -- parity!
      // int l = java.lang.Math.max(b.bitCount(), b.bitLength());
      int r = b.getLowestSetBit();
      BigInteger n = b.shiftRight(r);
      System.err.format("\t shifted, bits: count = %d, length = %d\n",
                         n.bitCount(),
                         n.bitLength());
      // int l2 = java.lang.Math.max(n.bitCount(), n.bitLength());

      int i;
      for(i=n.bitLength(); i>=0; i--) {
        if (n.testBit(i)) {
          retval.append('1');
        } else {
          retval.append('0');
        }
      }
      for(i=0; i<r; i++) {
        retval.append('0');
      }
      return retval.toString();
    }

    @Test public void testBinary() {
        System.out.println("FirstTest.testBinary (not really a test, but a \"test\"...)");
        System.err.println(" * stderr from a @Test");
        /*
                 0b0010  v = t = 2
                 0b0100  v = t * 2  (4) (I)
                 0b0110  v = v + t  (6) (I)

              0b00 1000  t = v + t  (8)
              0b01 0000    (I) (16)
              0b01 1000    (I) (24)

              0b10 0000    (I) (32)
            0b0100 0000    (I) (64)
            0b0110 0000    (I) (96)
            0b1000 0000    (I) (128)
         */
         boolean bDone = false;

         int t = 8;    // with t = 8, and
                       // with current iteration scheme (bOvrFlow = t<= 0)
                       // final lines are:
                       // "  t = -2147483648 (t-1 = 2147483647)
                       // "    0x80000000  (0x7fffffff)
         int v = t;
         boolean bOvrFlow = false;
         // int c = 0;
         while (!bDone) {
           if (bOvrFlow) {
             BigInteger bT, bV;
             v = t = 134217728;
             bV = bT = BigInteger.valueOf(t);
             for(int c = 0; c<15; c++) {
               String sBin = "00000000000000000000000000000000".concat(Integer.toBinaryString(v));
                v += t;
                bV.add(bT);
                System.out.println(sBin.substring(sBin.length() - 32) + toBinaryString(bV));
             }
             bDone = true;
           } else {
             System.out.format("  t = %d, (t+1 = %d)\n", t, t+1);
             for(int i=0; i<3; i++) {
               String sBin = "00000000000000000000000000000000".concat(Integer.toBinaryString(v));
               int l = sBin.length();
               String sHex = "00000000" + Integer.toHexString(v);
               System.out.format("\t0b%s, % 12d \t  0x%s\n",
                                 sBin.substring(l-32),
                                 v,
                                 sHex.substring(sHex.length()-8));
               // if (v > 100000000 &&    // 100663296 = 0b0110 0000 0000 0000 0000 0000 0000
               //      v < 150000000) {    //134217728 = 0x0800 0000
               //    String s = toBinaryString(bV);
               //    System.out.println("  BigInt bin'String = " + s);
                 // 0b00000110 0000 0000 0000 0000 0000 0000
                 //       0110 0000 0000 0000 0000 0000 0000
               //   System.out.println("  BigInt hexString = " + toHexString(bV));
                 //       0x0 6 0 0 0 0 0 0
               // }
               v += t;
             }
             // if (v <= 0) {
             //   bOvrFlow = true;
             // } else
             t = v;
             bOvrFlow = (t <= 0);
           }
         }
         System.out.format("  t = %d (t-1 = %d)\n    0x%s  (0x%s)\n",
                           t,
                           t-1,
                           Integer.toHexString(t),
                           Integer.toHexString(t-1));

    }
}
